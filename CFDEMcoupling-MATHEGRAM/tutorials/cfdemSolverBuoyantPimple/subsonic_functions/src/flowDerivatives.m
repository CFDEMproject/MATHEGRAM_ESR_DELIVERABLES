function [dydx] = flowDerivatives(x, y, otherInputs)
% OUTPUT:  
%  differential change of the state vector y = [p U T rho]
%  w.r.t. dimensionLESS differential space element dx 
%  (normalized by particle diameter d_p)
%  dydx(1) = dpdx
%  dydx(2) = dUdx
%  dydx(3) = dTdx
%  dydx(4) = dRhodx

% INPUT:
%  x - current position vector [m],
%  y - state vector
%  otherInputs - all other inputs (as a struct)
%     otherInputs.k ...isentropic exponent
%     otherInputs.phip ...particle volume fraction
%     otherInputs.f ... friction coefficient
%     otherInputs.Q ... heat coefficient
%     otherInputs.C ... void fraction function slope
%     otherInputs.C0 ... void fraction function constant
%     otherInputs.Cnorm ... normalized void fraction function slope

% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 

    % extract current state from y vector
    p   = y(1);
    U   = y(2);
    T   = y(3);
    rho = y(4);
  
    % get solid fraction distribution
    if (otherInputs.phip == 0)
       otherInputs.phip = ...
          calcPhipDistribution(otherInputs.C, otherInputs.C0, x);
    endif

    % square of the Mach number
    M2 = calcM2(rho, U, p, otherInputs.k, otherInputs.phip);

    % pressure p derivative 
    dydx(1) = ...
       - p .* otherInputs.k .* M2 ...
           .* ( (otherInputs.k - 1).* M2 + 1) ...
           ./ ( 1 - M2 ) ...
           .* otherInputs.f ... % friction
       - p .* otherInputs.k .* M2 ...
           ./ ( 1 - M2 ) ...
           .* otherInputs.Q ... % heat
       + p .* otherInputs.k .* M2 ...
           ./ ( 1 - M2 ) ...
           .* otherInputs.Cnorm ...
           ./ (otherInputs.Cnorm .* x + 1 ); % solid fraction
        

    % superficial velocity U derivative
    dydx(2) = ...
         U .* otherInputs.k .* M2 ...
           ./ ( 1 - M2 ) ... 
           .* otherInputs.f ... % friction
       + U ./ ( 1 - M2 ) ...
           .* otherInputs.Q ... % heat
       - U .* M2 ...
           ./ ( 1 - M2 ) ...
           .* otherInputs.Cnorm ...
           ./ (otherInputs.Cnorm .* x + 1 ); % solid fraction 

    % temperature T derivative 
    dydx(3) = ...
        - T .* otherInputs.k ...
            .* (otherInputs.k - 1) .* M2.^2 ...
            ./ ( 1 - M2 ) ...
            .* otherInputs.f ... % friction
        + T .* ( 1 - otherInputs.k .* M2 ) ...
            ./ ( 1 - M2 ) ...
            .* otherInputs.Q ... % heat 
        + T .* ( otherInputs.k - 1 ) .* M2 ...
            ./ ( 1 - M2 ) ...
            .* otherInputs.Cnorm ...
            ./ (otherInputs.Cnorm .* x + 1 ); % solid fraction

    % density rho derivative
    dydx(4) = ...
        - rho .* otherInputs.k .* M2 ...
              ./ ( 1 - M2 ) ...
              .* otherInputs.f ... % friction
        - rho ./ ( 1 - M2 ) ...
              .* otherInputs.Q ... % heat 
        + rho .* M2 ...
              ./ ( 1 - M2 ) ...
              .* otherInputs.Cnorm ...
              ./ (otherInputs.Cnorm .* x + 1 ); % solid fraction 

endfunction
